import { useEffect, useState } from "react";
import demoData from "@/lib/data/demo";
import Table from "@/components/tables/Table";
import BorderBox from "@/components/box/BorderBox";
import EditIcon from "@/assets/icons/EditIcon";
import DeleteIcon from "@/assets/icons/DeleteIcon";
import Title from "@/components/texts/Title";
import BaseButton from "@/components/buttons/BaseButton";
import Dialog from "@/components/dialogs/Dialog";
import { NavLink, useSearchParams } from "react-router-dom";
import FilterIcon from "@/assets/icons/FilterIcon";
import BaseMenu from "@/components/menus/BaseMenu";
import SubTitle from "@/components/texts/SubTitle";
import BaseTabList from "@/components/tabs/BaseTabList";
import { TabGroup, TabPanel, TabPanels } from "@headlessui/react";
import Page from "@/components/ui/Page";
import { CriteriaAndSegment, Task } from ".";
const tabs = [
  {
    id: 0,
    name: "Tasks",
    value: "tasks",
  },
  {
    id: 1,
    name: "Criteria And Segment",
    value: "criteria_and_segment",
  },
  {
    id: 2,
    name: "Marketing Activities",
    value: "marketing_activities",
  },
  {
    id: 3,
    name: "Marketing Categories",
    value: "marketing_categories",
  },
];
const brands = [
  {
    id: 1,
    name: "brand 1",
    value: "brand_1",
  },
  {
    id: 2,
    name: "brand 2",
    value: "brand_2",
  },
  {
    id: 3,
    name: "brand 3",
    value: "brand_3",
  },
];
const data = [
  {
    name: "Name",
    value: "Product Name",
  },
  {
    name: "SKU",
    value: "475827364",
  },
  {
    name: "Brand",
    value: "Brand Here",
  },
  {
    name: "Category",
    value: "Women Shoes",
  },
  {
    name: "Total Units Sold",
    value: "137,548 Units",
  },
  {
    name: "Total Sales Value",
    value: "SR 850,000.00",
  },
  {
    name: "Criteria Category",
    value: "Category A",
  },
];
const dataPerMonth = [
  {
    name: "Jan.21",
    value: [
      {
        data: ["A", "B"],
        task: [{ name: "task 1" }],
      },
    ],
  },
  {
    name: "Feb.21",
    value: [
      {
        data: ["B", "C"],
        task: [],
      },
    ],
  },
  {
    name: "Mar.21",
    value: [
      {
        data: ["A", "C"],
        task: [],
      },
    ],
  },
  {
    name: "Apr.21",
    value: [
      {
        data: ["A", "B"],
        task: [{ name: "task 1" }],
      },
    ],
  },
  {
    name: "May.21",
    value: [
      {
        data: ["A", "B"],
      },
    ],
  },
  {
    name: "Jun.21",
    value: [
      {
        data: ["B", "C"],
      },
    ],
  },
  {
    name: "Jul.21",
    value: [
      {
        data: ["A", "B"],
      },
    ],
  },
  {
    name: "Aug.21",
    value: [
      {
        data: ["A", "B"],
      },
    ],
  },
  {
    name: "Sep.21",
    value: [
      {
        data: ["A", "B"],
      },
    ],
  },
  {
    name: "Oct.21",
    value: [
      {
        data: ["A", "B"],
      },
    ],
  },
  {
    name: "Nov.21",
    value: [
      {
        data: ["A", "B"],
      },
    ],
  },
  {
    name: "Dec.21",
    value: [
      {
        data: ["A", "B"],
      },
    ],
  },
  {
    name: "Jan.22",
    value: [
      {
        data: ["A", "B"],
      },
    ],
  },
];
const query = {
  headers: [
    {
      name: "sku",
      value: "sku",
      cellValue: (row) => {
        return row?.sku;
      },
    },
    {
      name: "brand",
      value: "brand",
      cellValue: (row) => {
        return row?.brand;
      },
    },
    {
      name: "category",
      value: "category",
      cellValue: (row) => {
        return row?.category;
      },
    },
  ],
  isLoading: false,
  data: demoData,
};
export default function Marketing() {
  const [searchParams, setSearchParams] = useSearchParams();

  const [brand, setBrand] = useState(null);
  const [isOpenTasksApplied, setIsOpenTasksApplied] = useState(false);
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  const [activeTab, setActiveTab] = useState(() =>
    searchParams.get("type") == null
      ? tabs[0]
      : tabs.find((tab) => tab.value == searchParams.get("type"))
  );
  useEffect(() => {
    setActiveTabIndex(activeTab?.id);
  }, [activeTab]);
  useEffect(() => {
    setActiveTab(
      searchParams.get("type") == null
        ? tabs[0]
        : tabs.find((tab) => tab.value == searchParams.get("type"))
    );
  }, [searchParams.get("type")]);
  // function handelOpenModal() {
  //   switch (activeTabIndex) {
  //     case 0:
  //       setIsOpenAddNewStand(true);
  //       return;
  //     case 1:
  //       setIsOpenAddNewStandType(true);
  //       return;
  //     case 2:
  //       setIsOpenAddNewPOSMaterials(true);
  //       return;
  //     default:
  //       return;
  //   }
  // }
  return (
    <TabGroup
      selectedIndex={activeTabIndex}
      onChange={setActiveTabIndex}
      className={"h-full flex flex-col "}
    >
      <Page
        // className={}
        title="Marketing"
        actions={
          <BaseTabList
            list={tabs}
            activeTab={activeTab}
            className={{ tabList: "mx-auto" }}
            handelOnChangeTab={(item) => {
              setSearchParams({ type: item.value });
            }}
          />
          //   <BaseMenu
          //   text="sort by"
          //   data={brands}
          //   value={brand}
          //   setValue={(item) => setBrand(item)}
          //   className="px-4 pt-0 pb-0 text-xs rounded-none border-t-transparent border-b-transparent border-l-custom_line_one border-r-custom_line_one"
          // />
          // <FilterIcon className="text-custom_text_two size-4" />
        }
        // className={"bg-red-600"}
      >
        <div className="flex-1 flex flex-col overflow-hidden ">
          <TabPanels className="flex-1 flex flex-col overflow-hidden">
            <TabPanel className={"flex-1 flex flex-col overflow-hidden"}>
              <Task />
            </TabPanel>
            <TabPanel className={"flex-1 flex flex-col overflow-hidden"}>
              <CriteriaAndSegment />
            </TabPanel>
          </TabPanels>
        </div>
        {/* <div className="flex flex-col overflow-hidden">
          <TabPanels className="">
            <TabPanel className={" "}>
              <Task />
            </TabPanel>
            <TabPanel className={"flex flex-col flex-1"}>
              <BorderBox className={"my-4 flex-1"}>
                <CriteriaAndSegment />
              </BorderBox>
            </TabPanel>
            <TabPanel className={"flex flex-col flex-1"}>
              <BorderBox className={"my-4 flex-1"}>DEMO 1</BorderBox>
            </TabPanel>
            <TabPanel className={"flex flex-col flex-1"}>
              <BorderBox className={"my-4 flex-1"}>DEMO 2</BorderBox>
            </TabPanel>
          </TabPanels>
        </div> */}
      </Page>
      <div className="flex items-center justify-between flex-1 gap-3 overflow-x-auto">
            {data?.map((item, i) => (
              <div key={i} className="space-y-1 shrink-0">
                <SubTitle className="text-sm font-extralight">
                  {item.name}
                </SubTitle>
                <Title className="!text-sm font-light">{item.value}</Title>
              </div>
            ))}
          </div>
          <div className="flex items-center justify-center gap-2 text-custom_yellow">
            <div className="flex items-center justify-center p-2 border rounded-lg bg-custom_bg_eight siz-10 border-custom_line_two">
              <EditIcon className="size-3" />
            </div>
            <div className="flex items-center justify-center p-2 border rounded-lg bg-custom_bg_eight siz-10 border-custom_line_two">
              <DeleteIcon className="size-3" />
            </div>
          </div>
        </div>
        <div className="flex gap-3 mt-3 overflow-x-auto">
          {dataPerMonth?.map((data, i) => (
            <div key={i} className="">
              <div className="relative flex gap-2">
                {data.value?.map((item, i) =>
                  item.data?.map((val) => (
                    <>
                      <div
                        key={i}
                        className="py-2 text-white bg-red-500/35 px-7 rounded-xl"
                      >
                        {val}
                      </div>
                      {item?.task?.length > 0 && (
                        <button
                          className="absolute bg-lime-500 rounded-full py-1 px-3 top-1/2 left-1/2 text-[10px] -translate-x-1/2 -translate-y-1/2"
                          onClick={() => setIsOpenTasksApplied(true)}
                        >
                          Task
                        </button>
                      )}
                    </>
                  ))
                )}
              </div>
              {data.name}
            </div>
          ))}
        </div>
    </TabGroup>
  );
}
